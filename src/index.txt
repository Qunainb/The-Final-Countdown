=> Refs
- A ref in the react is the value just like state is the value but special kind of value
- In React, a ref (short for "reference") is an object that allows you to directly access and interact with a DOM element
 or a React component.
- You can then use current to access the properties of that element.

=> State VS Refs
- State (useState) triggers a re-render when updated.
- Refs (useRef) do not trigger a re-render when updated.

// Use case 
- State: UI updates, form inputs, component state
- Ref: Referencing DOM elements, storing previous values, timers, etc.

=> We can use Ref for more than "DOM element connection"
- useRef is also used to store timer IDs when working with setTimeout or setInterval
- This is because useRef persists values across renders without causing re-renders, unlike useState.
- Even if useRef is stored inside state, updating .current won't trigger a re-render.

=> Modal Component
- dialogs element: "<dialog> </dialog>"
- The <dialog> element in HTML is used to create interactive, modal, or non-modal dialog boxes. It allows you to display a popup within a web page
- If we add a from with method = "dialog" inside of a dialog the button that submits the form will close this dialog
- Also the built in dialog element by default is hidden. To make is visible by adding "open" attribute to it

=> Forwading refs to Custom Components
- In React, ref cannot be passed directly to a custom component.
- By default, refs only work on native HTML elements (<input>, <button>, etc.), but not on custom components.
- To allow a custom component to receive a ref we use forwardRef
- We wrap our component function with some function provided by react

- In React 19, you can directly assign a ref to a custom component without using forwardRef


=> useImperativeHandle
- useImperativeHandle is used in React to expose specific properties or methods of a child component to its parent when using ref.

=> Why use useImperativeHandle
- Normally, refs only give access to the DOM element (like an <input>).
- But sometimes, you want to expose custom methods inside a component to be controlled from the parent.

// Summary
- If the ref is on a DOM element (<dialog ref={dialog}>), you can directly use dialog.current.showModal(), and useImperativeHandle is not needed.
- If the ref is on a custom component, React wonâ€™t forward it by default. You must use forwardRef + useImperativeHandle to expose functions like open().

=> Portals
- A Portal in React allows you to render a component outside of its normal DOM hierarchy, usually directly inside the <body> or another DOM node.